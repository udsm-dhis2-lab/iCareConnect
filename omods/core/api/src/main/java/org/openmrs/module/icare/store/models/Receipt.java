package org.openmrs.module.icare.store.models;

// Generated Oct 7, 2020 12:48:40 PM by Hibernate Tools 5.2.10.Final

import org.openmrs.BaseOpenmrsData;
import org.openmrs.Location;

import javax.persistence.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * StReceipt generated by hbm2java
 */
@Entity
@Table(name = "st_receipt")
public class Receipt extends BaseOpenmrsData implements java.io.Serializable {
	
	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "receipt_id", unique = true, nullable = false)
	private Integer id;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "issue_id")
	private Issue issue;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "receiving_location_id")
	private Location receivingLocation;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "issueing_location_id")
	private Location issueingLocation;
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "id.receipt", cascade = { CascadeType.PERSIST })
	private List<ReceiptItem> receiptItems = new ArrayList<ReceiptItem>(0);
	
	public Integer getId() {
		return id;
	}
	
	public void setId(Integer id) {
		this.id = id;
	}
	
	public Issue getIssue() {
		return issue;
	}
	
	public void setIssue(Issue issue) {
		this.issue = issue;
	}
	
	public List<ReceiptItem> getReceiptItems() {
		return receiptItems;
	}
	
	public void setReceiptItems(List<ReceiptItem> receiptItems) {
		this.receiptItems = receiptItems;
	}
	
	public Location getReceivingLocation() {
		return receivingLocation;
	}
	
	public void setReceivingLocation(Location receivingLocation) {
		this.receivingLocation = receivingLocation;
	}
	
	public Location getIssueingLocation() {
		return issueingLocation;
	}
	
	public void setIssueingLocation(Location issueingLocation) {
		this.issueingLocation = issueingLocation;
	}
	
	public Receipt fromMap(Map<String, Object> receiptMap) {
		
		Receipt receipt = new Receipt();
		
		Issue issue = new Issue();
		issue.setUuid(((Map) receiptMap.get("issue")).get("uuid").toString());
		receipt.setIssue(issue);
		
		Location receivingLocation = new Location();
		receivingLocation.setUuid(((Map) receiptMap.get("receivingLocation")).get("uuid").toString());
		receipt.setReceivingLocation(receivingLocation);
		
		Location issueingLocation = new Location();
		issueingLocation.setUuid(((Map) receiptMap.get("issueingLocation")).get("uuid").toString());
		receipt.setIssueingLocation(issueingLocation);
		
		return receipt;
	}
	
	public Map<String, Object> toMap() {
		Map<String, Object> receiptObject = new HashMap<String, Object>();
		
		receiptObject.put("uuid", this.getUuid());
		
		Map<String, Object> issueObject = new HashMap<String, Object>();
		issueObject.put("uuid", this.getIssue().getUuid());
		receiptObject.put("issue", issueObject);
		
		Map<String, Object> issueingLocationObject = new HashMap<String, Object>();
		if (this.getIssueingLocation() != null) {
			issueingLocationObject.put("uuid", this.getIssueingLocation().getUuid());
			issueingLocationObject.put("display", this.getIssueingLocation().getDisplayString());
		}
		receiptObject.put("issueingLocation", issueingLocationObject);
		
		Map<String, Object> receivingLocationObject = new HashMap<String, Object>();
		if (this.getReceivingLocation() != null) {
			receivingLocationObject.put("uuid", this.getReceivingLocation().getUuid());
			receivingLocationObject.put("display", this.getReceivingLocation().getDisplayString());
		}
		receiptObject.put("receivingLocation", receivingLocationObject);
		
		List<Map<String, Object>> receiptItems = new ArrayList<Map<String, Object>>();
		for (ReceiptItem receiptItem : this.getReceiptItems()) {
			receiptItems.add(receiptItem.toMap());
		}
		
		receiptObject.put("receiptItems", receiptItems);
		
		Map<String, Object> creatorObject = new HashMap<String, Object>();
		if (this.getCreator() != null) {
			creatorObject.put("uuid", this.getCreator().getUuid());
			creatorObject.put("display", this.getCreator().getDisplayString());
		}
		receiptObject.put("creator", creatorObject);
		Date date = this.getDateCreated();
		DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
		receiptObject.put("created", dateFormat.format(date));
		
		return issueObject;
		
	}
	
}
