package org.openmrs.module.icare.store.models;

// Generated Oct 7, 2020 12:48:40 PM by Hibernate Tools 5.2.10.Final

import org.openmrs.BaseOpenmrsData;
import org.openmrs.Location;
import org.openmrs.module.icare.core.Item;
import org.openmrs.module.icare.store.util.Stockable;

import javax.persistence.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * StLedger generated by hbm2java
 */
@Entity
@Table(name = "st_ledger")
public class Ledger extends BaseOpenmrsData implements java.io.Serializable, Stockable {
	
	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "ledger_id", unique = true, nullable = false)
	private int id;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "item_id")
	private Item item;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ledger_type_id")
	private LedgerType ledgerType;
	
	@Column(name = "batch_no")
	private String batchNo;
	
	@Column(name = "buying_price")
	private Double buyingPrice;
	
	@Temporal(TemporalType.DATE)
	@Column(name = "expiry_date", length = 10)
	private Date expiryDate;
	
	@Column(name = "remarks", length = 65535)
	private String remarks;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "location_id")
	private Location location;
	
	@Column(name = "quantity")
	private Double quantity;
	
	@Transient
	private Location sourceLocation;
	
	@Transient
	private Location destinationLocation;
	
	public Item getItem() {
		return this.item;
	}
	
	public void setItem(Item item) {
		this.item = item;
	}
	
	public String getBatchNo() {
		return this.batchNo;
	}
	
	public void setBatchNo(String batchNo) {
		this.batchNo = batchNo;
	}
	
	public Date getExpiryDate() {
		return this.expiryDate;
	}
	
	public void setExpiryDate(Date expiryDate) {
		this.expiryDate = expiryDate;
	}
	
	public String getRemarks() {
		return this.remarks;
	}
	
	@Override
	public Location getSourceLocation() {
		return sourceLocation;
	}
	
	@Override
	public Location getDestinationLocation() {
		return destinationLocation;
	}
	
	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}
	
	public LedgerType getLedgerType() {
		return ledgerType;
	}
	
	public void setLedgerType(LedgerType ledgerType) {
		this.ledgerType = ledgerType;
	}
	
	@Override
	public void setId(Integer id) {
		this.id = id;
	}
	
	public void setSourceLocation(Location sourceLocation) {
		this.sourceLocation = sourceLocation;
	}
	
	public Integer getId() {
		return this.id;
	}
	
	public Map<String, Object> toMap() {
		
		Map<String, Object> ledgerMap = new HashMap<String, Object>();
		
		if (this.getLedgerType() != null) {
			ledgerMap.put("ledgerType", this.getLedgerType().toMap());
		}
		
		if (this.getItem() != null) {
			
			ledgerMap.put("item", this.getItem().toMap());
		}
		
		Map<String, Object> creatorObject = new HashMap<String, Object>();
		if (this.getCreator() != null) {
			creatorObject.put("uuid", this.getCreator().getUuid());
			creatorObject.put("display", this.getCreator().getDisplayString());
			creatorObject.put("name", this.getCreator().getName());
			creatorObject.put("email", this.getCreator().getEmail());
		}
		ledgerMap.put("creator", creatorObject);
		
		ledgerMap.put("quantity", this.getQuantity());
		ledgerMap.put("batchNo", this.getBatchNo());
		ledgerMap.put("remarks", this.getRemarks());
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
		ledgerMap.put("expiryDate", dateFormat.format(this.getExpiryDate()));
		ledgerMap.put("buyingPrice", this.getBuyingPrice());
		
		Map<String, Object> locationObject = new HashMap<String, Object>();
		locationObject.put("uuid", this.getLocation().getUuid());
		locationObject.put("display", this.getLocation().getDisplayString());
		locationObject.put("name", this.getLocation().getName());
		
		ledgerMap.put("location", locationObject);
		
		return ledgerMap;
	}
	
	public static Ledger fromMap(Map<String, Object> ledgerMap) throws ParseException {
		
		Ledger ledger = new Ledger();
		Item item = new Item();
		item.setUuid(((Map) ledgerMap.get("item")).get("uuid").toString());
		ledger.setItem(item);
		
		ledger.setBatchNo(ledgerMap.get("batchNo").toString());
		
		if (ledgerMap.get("buyingPrice") instanceof Integer) {
			ledger.setBuyingPrice(((Integer) ledgerMap.get("buyingPrice")).doubleValue());
		} else if (ledgerMap.get("buyingPrice") instanceof Double) {
			ledger.setBuyingPrice((Double) ledgerMap.get("buyingPrice"));
		}
		
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		if (ledgerMap.get("expiryDate").toString().length() == 10) {
			ledger.setExpiryDate(dateFormat.parse(ledgerMap.get("expiryDate").toString()));
		} else {
			ledger.setExpiryDate(dateFormat.parse(ledgerMap.get("expiryDate").toString()
			        .substring(0, ledgerMap.get("expiryDate").toString().indexOf("T"))));
		}
		
		ledger.setRemarks(ledgerMap.get("remarks").toString());
		
		if (ledgerMap.get("quantity") instanceof Integer) {
			ledger.setQuantity(((Integer) ledgerMap.get("quantity")).doubleValue());
		} else if (ledgerMap.get("quantity") instanceof Double) {
			ledger.setQuantity((Double) ledgerMap.get("quantity"));
		}
		
		LedgerType ledgerType = new LedgerType();
		ledgerType.setUuid(((Map) ledgerMap.get("ledgerType")).get("uuid").toString());
		ledger.setLedgerType(ledgerType);
		
		Location location = new Location();
		location.setUuid(((Map) ledgerMap.get("location")).get("uuid").toString());
		ledger.setLocation(location);
		
		if (ledgerMap.get("sourceLocation") != null) {
			Location sourceLocation = new Location();
			sourceLocation.setUuid(((Map) ledgerMap.get("sourceLocation")).get("uuid").toString());
			ledger.setSourceLocation(sourceLocation);
		}
		
		return ledger;
		
	}
	
	public Location getLocation() {
		return location;
	}
	
	public void setLocation(Location location) {
		this.location = location;
	}
	
	public Double getQuantity() {
		return quantity;
	}
	
	public void setQuantity(Double quantity) {
		this.quantity = quantity;
	}
	
	public Double getBuyingPrice() {
		return buyingPrice;
	}
	
	public void setBuyingPrice(Double buyingPrice) {
		this.buyingPrice = buyingPrice;
	}
}
