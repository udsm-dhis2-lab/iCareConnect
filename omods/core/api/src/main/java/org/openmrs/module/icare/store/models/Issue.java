package org.openmrs.module.icare.store.models;

// Generated Oct 7, 2020 12:48:40 PM by Hibernate Tools 5.2.10.Final

import org.openmrs.BaseOpenmrsData;
import org.openmrs.Location;

import javax.persistence.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * StIssue generated by hbm2java
 */
@Entity
@Table(name = "st_issue")
public class Issue extends BaseOpenmrsData implements java.io.Serializable {
	
	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "issue_id", unique = true, nullable = false)
	private int id;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "requisition_id")
	private Requisition requisition;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "issueing_location_id")
	private Location issueingLocation;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "issued_location_id")
	private Location issuedLocation;
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "issue")
	private List<Receipt> receipts = new ArrayList<Receipt>(0);
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "id.issue", cascade = { CascadeType.PERSIST })
	private List<IssueItem> issueItems = new ArrayList<IssueItem>(0);
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "issue")
	private List<IssueStatus> issueStatuses = new ArrayList<IssueStatus>(0);
	
	public Integer getId() {
		return id;
	}
	
	@Override
	public void setId(Integer id) {
		this.id = id;
	}
	
	public Requisition getRequisition() {
		return requisition;
	}
	
	public void setRequisition(Requisition requisition) {
		this.requisition = requisition;
	}
	
	public List<Receipt> getReceipts() {
		return receipts;
	}
	
	public void setReceipts(List<Receipt> receipts) {
		this.receipts = receipts;
	}
	
	public List<IssueItem> getIssueItems() {
		return issueItems;
	}
	
	public void setIssueItems(List<IssueItem> issueItems) {
		this.issueItems = issueItems;
	}
	
	public List<IssueStatus> getIssueStatuses() {
		
		return this.issueStatuses;
		
	}
	
	public void setIssueStatuses(List<IssueStatus> issueStatuses) {
		this.issueStatuses = issueStatuses;
	}
	
	public Location getIssueingLocation() {
		return issueingLocation;
	}
	
	public void setIssueingLocation(Location issueingLocation) {
		this.issueingLocation = issueingLocation;
	}
	
	public Location getIssuedLocation() {
		return issuedLocation;
	}
	
	public void setIssuedLocation(Location issuedLocation) {
		this.issuedLocation = issuedLocation;
	}
	
	public static Issue fromMap(Map<String, Object> issueMap) {
		
		Issue issue = new Issue();
		
		Location issuedLocation = new Location();
		issuedLocation.setUuid(((Map) issueMap.get("issuedLocation")).get("uuid").toString());
		issue.setIssuedLocation(issuedLocation);
		
		Location issueingLocation = new Location();
		issueingLocation.setUuid(((Map) issueMap.get("issueingLocation")).get("uuid").toString());
		issue.setIssueingLocation(issueingLocation);
		
		Requisition requisition = new Requisition();
		requisition.setUuid(((Map) issueMap.get("requisition")).get("uuid").toString());
		issue.setRequisition(requisition);
		
		return issue;
	}
	
	public Map<String, Object> toMap() {
		
		Map<String, Object> issueObject = new HashMap<String, Object>();
		
		issueObject.put("uuid", this.getUuid());
		
		Map<String, Object> issuedLocationObject = new HashMap<String, Object>();
		if (this.getIssuedLocation() != null) {
			issuedLocationObject.put("uuid", this.getIssuedLocation().getUuid());
			issuedLocationObject.put("display", this.getIssuedLocation().getDisplayString());
		}
		issueObject.put("issuedLocation", issuedLocationObject);
		
		Map<String, Object> issueingLocationObject = new HashMap<String, Object>();
		if (this.getIssueingLocation() != null) {
			issueingLocationObject.put("uuid", this.getIssueingLocation().getUuid());
			issueingLocationObject.put("display", this.getIssueingLocation().getDisplayString());
		}
		issueObject.put("issueingLocation", issueingLocationObject);
		
		List<Map<String, Object>> issueStatuses = new ArrayList<Map<String, Object>>();
		for (IssueStatus issueStatus : this.getIssueStatuses()) {
			issueStatuses.add(issueStatus.toMap());
		}
		issueObject.put("issueStatuses", issueStatuses);
		
		List<Map<String, Object>> issueItems = new ArrayList<Map<String, Object>>();
		for (IssueItem issueItem : this.getIssueItems()) {
			issueItems.add(issueItem.toMap());
		}
		issueObject.put("issueItems", issueItems);
		
		Map<String, Object> requisitionObject = new HashMap<String, Object>();
		requisitionObject.put("uuid", this.getRequisition().getUuid());
		
		issueObject.put("requisition", requisitionObject);
		
		Map<String, Object> creatorObject = new HashMap<String, Object>();
		if (this.getCreator() != null) {
			creatorObject.put("uuid", this.getCreator().getUuid());
			creatorObject.put("display", this.getCreator().getDisplayString());
		}
		issueObject.put("creator", creatorObject);
		Date date = this.getDateCreated();
		DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
		issueObject.put("created", dateFormat.format(date));
		
		List<Receipt> receipts = this.getReceipts();
		List<Map<String, Object>> receiptsList = new ArrayList<Map<String, Object>>();
		for (Receipt receipt : receipts) {
			
			receiptsList.add(receipt.toMap());
		}
		issueObject.put("receipts", receiptsList);
		
		return issueObject;
	}
	
}
