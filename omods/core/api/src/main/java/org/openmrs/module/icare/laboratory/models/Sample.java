package org.openmrs.module.icare.laboratory.models;

// Generated Oct 7, 2020 12:48:40 PM by Hibernate Tools 5.2.10.Final

import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import org.codehaus.jackson.annotate.JsonIgnore;
import org.codehaus.jackson.map.annotate.JsonDeserialize;
import org.hibernate.annotations.DiscriminatorFormula;
import org.openmrs.*;
import org.openmrs.api.AdministrationService;
import org.openmrs.api.context.Context;
import org.openmrs.module.icare.ICareConfig;
import org.openmrs.module.icare.core.JSONConverter;
import org.openmrs.module.icare.core.utils.ChildIdOnlyDeserializer;
import org.openmrs.module.icare.core.utils.ChildIdOnlySerializer;

import javax.persistence.*;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.*;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * LbSample generated by hbm2java
 */
@Entity
@Table(name = "lb_sample")
@DiscriminatorFormula("0")
@DiscriminatorValue("0")
public class Sample extends BaseOpenmrsData implements java.io.Serializable, JSONConverter {
	
	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "sample_id", unique = true, nullable = false)
	private Integer id;
	
	@ManyToOne
	@JoinColumn(name = "visit_id")
	@JsonSerialize(using = ChildIdOnlySerializer.class)
	@JsonDeserialize(using = ChildIdOnlyDeserializer.class)
	private Visit visit;
	
	@Column(name = "label", length = 65535)
	private String label;
	
	@Column(name = "date_time")
	private Date dateTime;
	
	@ManyToOne
	@JoinColumn(name = "concept_id")
	@JsonSerialize(using = ChildIdOnlySerializer.class)
	@JsonDeserialize(using = ChildIdOnlyDeserializer.class)
	private Concept concept;
	
	@ManyToOne
	@JoinColumn(name = "specimen_source_id")
	@JsonSerialize(using = ChildIdOnlySerializer.class)
	@JsonDeserialize(using = ChildIdOnlyDeserializer.class)
	private Concept specimenSource;
	
	@JsonIgnore
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "id.sample", cascade = { CascadeType.PERSIST })
	private List<SampleOrder> sampleOrders = new ArrayList<SampleOrder>(0);
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "sample")
	private List<SampleStatus> sampleStatuses = new ArrayList<SampleStatus>(0);
	
	@ManyToOne
	@JoinColumn(name = "location_id")
	@JsonSerialize(using = ChildIdOnlySerializer.class)
	@JsonDeserialize(using = ChildIdOnlyDeserializer.class)
	private Location location;
	
	//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "sampleOrder.id.sample")
	//	private List<TestAllocation> testAllocations = new ArrayList<TestAllocation>(0);
	
	@ManyToOne
	@JoinColumn(name = "batch_sample_id")
	private BatchSample batchSample;
	
	@Transient
	private WorksheetSample worksheetSample;
	
	public Sample() {
	}
	
	public static Sample fromMap(Map<String, Object> sampleMap) {
		Sample newSample = new Sample();
		newSample.setLabel((String) sampleMap.get("label"));
		
		Visit visit = new Visit();
		visit.setUuid(((Map) sampleMap.get("visit")).get("uuid").toString());
		newSample.setVisit(visit);
		
		//		Concept concept = new Concept();
		//		concept.setUuid(((Map) sampleMap.get("concept")).get("uuid").toString());
		//		newSample.setConcept(concept);
		return newSample;
	}
	
	public Map<String, Object> toMap() throws Exception {
		HashMap<String, Object> sampleObject = (new HashMap<String, Object>());
		sampleObject.put("label", this.getLabel());
		
		SimpleDateFormat sdf = new SimpleDateFormat("dd-M-yyyy hh:mm:ss");
		if (this.getDateTime() != null) {
			//			sampleObject.put("created", sdf.format(this.getDateTime()));
			sampleObject.put("created", this.getDateTime());
		} else if (this.getDateCreated() != null) {
			//			sampleObject.put("created", sdf.format(this.getDateCreated()));
			
			sampleObject.put("created", this.getDateCreated());
		}
		
		if (this.getDateTime() != null) {
			//			sampleObject.put("created", sdf.format(this.getDateTime()));
			sampleObject.put("dateCreated", this.getDateTime());
		} else if (this.getDateCreated() != null) {
			//			sampleObject.put("created", sdf.format(this.getDateCreated()));
			
			sampleObject.put("dateCreated", this.getDateCreated());
		}
		
		if (this.getDateTime() != null) {
			//			sampleObject.put("created", sdf.format(this.getDateTime()));
			sampleObject.put("dateTimeCreated", this.getDateTime());
		} else if (this.getDateCreated() != null) {
			//			sampleObject.put("created", sdf.format(this.getDateCreated()));
			
			sampleObject.put("dateTimeCreated", this.getDateCreated());
		}
		
		sampleObject.put("uuid", this.getUuid());
		
		Map<String, Object> creatorObject = new HashMap<String, Object>();
		
		if (this.getCreator() != null) {
			creatorObject.put("uuid", this.getCreator().getUuid());
			creatorObject.put("display", this.getCreator().getDisplayString());
		}
		
		Map<String, Object> locationObject = new HashMap<String, Object>();
		
		if (this.getLocation() != null) {
			locationObject.put("uuid", this.getLocation().getUuid());
			locationObject.put("display", this.getLocation().getDisplayString());
			List<Map<String, Object>> attributes = new ArrayList<>();
			if (this.getLocation().getAttributes().size() > 0) {
				for(LocationAttribute locationAttribute: this.getLocation().getAttributes()) {
					Map<String, Object> attribute = new HashMap<>();
					attribute.put("value", locationAttribute.getValue());
					Map<String, Object> attributeType =  new HashMap<>();
					attributeType.put("uuid", locationAttribute.getAttributeType().getUuid());
					attribute.put("attributeType", attributeType);
					attributes.add(attribute);
				}
			}
			locationObject.put("attributes", attributes);
		}
		
		sampleObject.put("location", locationObject);
		sampleObject.put("creator", creatorObject);
		
		sampleObject.put("voided", this.getVoided());
		HashMap<String, Object> visitObject = new HashMap<String, Object>();
		visitObject.put("uuid", this.getVisit().getUuid());
		visitObject.put("startDateTime", this.getVisit().getStartDatetime());
		visitObject.put("stopDateTime", this.getVisit().getStopDatetime());
		List<Map<String, Object>> visitAttributes = new ArrayList<>();
		if ( this.getVisit().getAttributes().size() > 0) {
			for(VisitAttribute visitAttribute: this.getVisit().getAttributes()) {
				Map<String, Object> attribute = new HashMap<>();
				attribute.put("value", visitAttribute.getValue());
				Map<String, Object> attributeType =  new HashMap<>();
				attributeType.put("uuid", visitAttribute.getAttributeType().getUuid());
				attribute.put("attributeType", attributeType);
				visitAttributes.add(attribute);
			}
		}
		visitObject.put("attributes", visitAttributes);
		
		sampleObject.put("visit", visitObject);
		
		//
		//		HashMap<String, Object> patientObject = new HashMap<String, Object>();
		//		patientObject.put("MRN",this.getVisit().getPatient().getPatientIdentifier().getIdentifier());
		//		patientObject.put("name",this.getVisit().getPatient().getPerson().getGivenName().concat((" ").concat(this.getVisit().getPatient().getPerson().getGivenName())));
		//		sampleObject.put("patient", patientObject);
		
		HashMap<String, Object> conceptObject = new HashMap<String, Object>();
		conceptObject.put("uuid", this.getConcept().getUuid());
		conceptObject.put("display", this.getConcept().getDisplayString());
		if(this.getConcept().getShortNameInLocale(new Locale("en")) != null) {
			conceptObject.put("shortName", this.getConcept().getShortNameInLocale(new Locale("en")).getName());
		}
		
		sampleObject.put("concept", conceptObject);
		sampleObject.put("department", conceptObject);

		HashMap<String, Object> specimenSource = new HashMap<String, Object>();
		if (this.getSpecimenSource() != null) {
			specimenSource.put("uuid", this.getSpecimenSource().getUuid());
			specimenSource.put("display", this.getSpecimenSource().getDisplayString());
		}
		sampleObject.put("specimenSource", specimenSource);
		
		List<Map<String, Object>> orders = new ArrayList<Map<String, Object>>();
		
		for (SampleOrder sampleOrder : this.getSampleOrders()) {
			
			if (!sampleOrder.getOrder().getVoided()) {
				orders.add(sampleOrder.toMap(false));
			}
		}

		sampleObject.put("orders", orders);
		
		List<Map<String, Object>> sampleStatusesList = new ArrayList<Map<String, Object>>();

		for (SampleStatus sampleStatus : this.getSampleStatuses()) {
			
			sampleStatusesList.add(sampleStatus.toMap());
		}
		
		sampleObject.put("statuses", sampleStatusesList);
		
		//add sample patietient details
		HashMap<String, Object> patientObject = new HashMap<String, Object>();
		patientObject.put("uuid", this.getVisit().getPatient().getUuid());
		patientObject.put("allergy", this.getVisit().getPatient().getAllergyStatus());
		//		patientObject.put("dob", this.getVisit().getPatient().getPerson().getBirthDateTime());
		patientObject.put("dob", this.getVisit().getPatient().getPerson().getBirthdate());
		
		//		if (this.getVisit().getPatient().getBirthDateTime() == null) {
		//			if (this.getVisit().getPatient().getPerson().getBirthDateTime() == null) {
		//
		//			} else {
		//				patientObject.put("dob", this.getVisit().getPatient().getPerson().getBirthDateTime());
		//			}
		//
		//		} else {
		//			patientObject.put("dob", this.getVisit().getPatient().getBirthDateTime());
		//		}
		
		List<HashMap<String, Object>> patientIdentifiers = new ArrayList<HashMap<String, Object>>();
		for (PatientIdentifier patientIdentifier : this.getVisit().getPatient().getIdentifiers()) {
			HashMap<String, Object> patientIdentifierObject = new HashMap<String, Object>();
			patientIdentifierObject.put("id", patientIdentifier.getIdentifier());
			patientIdentifierObject.put("name", patientIdentifier.getIdentifierType().getName());
			patientIdentifiers.add(patientIdentifierObject);
		}

//		String phoneNumber = null;
//		String phoneAttributeTypeUuid = Context.getService(AdministrationService.class).getGlobalProperty(ICareConfig.PHONE_NUMBER_ATTRIBUTE);
//		if (phoneAttributeTypeUuid != null && Context.getPersonService().getPersonAttributeTypeByUuid(phoneAttributeTypeUuid) != null) {
//			phoneNumber = this.getVisit().getPatient().getPerson().getAttribute(Context.getPersonService().getPersonAttributeTypeByUuid(phoneAttributeTypeUuid)).getValue();
//		}
//		patientObject.put("phone", phoneNumber);

		patientObject.put("identifiers", patientIdentifiers);
		patientObject.put("age", this.getVisit().getPatient().getAge());
		patientObject.put("familyName", this.getVisit().getPatient().getPersonName().getFamilyName());
		patientObject.put("middleName", this.getVisit().getPatient().getPersonName().getMiddleName());
		patientObject.put("givenName", this.getVisit().getPatient().getPersonName().getGivenName());
		patientObject.put("familyName2", this.getVisit().getPatient().getPersonName().getFamilyName2());
		patientObject.put("gender", this.getVisit().getPatient().getGender());
		patientObject.put("uuid", this.getVisit().getPatient().getUuid());

		List<Map<String, Object>> personAttributes = new ArrayList<>();
		if (this.getVisit().getPatient().getPerson().getAttributes().size() > 0) {
			for (PersonAttribute personAttribute: this.getVisit().getPatient().getPerson().getAttributes()) {
				Map<String, Object> attribute = new HashMap<>();
				Map<String, Object> attributeType = new HashMap<>();
				attributeType.put("uuid", personAttribute.getAttributeType().getUuid());
				attributeType.put("name", personAttribute.getAttributeType().getName());
				attribute.put("attributeType", attributeType);
				attribute.put("value", personAttribute.getValue());
				personAttributes.add(attribute);
			}
		}
		patientObject.put("attributes", personAttributes);

		List<Map<String, Object>> addresses = new ArrayList<>();
		if (this.getVisit().getPatient().getPerson().getAddresses().size() > 0) {
			for(PersonAddress personAddress: this.getVisit().getPatient().getPerson().getAddresses()) {
				Map<String, Object> address = new HashMap<>();
				String address1 = null;
				String address2 = null;
				String address3 = null;
				String address4 = null;
				String cityVillage = null;
				String country = null;
				if (personAddress.getAddress1() != null) {
					address1 = personAddress.getAddress1().toString();
				}
				address.put("address1", address1);
				if (personAddress.getAddress2() != null) {
					address2 = personAddress.getAddress2().toString();
				}
				address.put("address2", address2);

				if (personAddress.getAddress3() != null) {
					address3 = personAddress.getAddress3().toString();
				}
				address.put("address3", address3);

				if (personAddress.getAddress4() != null) {
					address4= personAddress.getAddress4().toString();
				}
				address.put("address4", address4);

				if (personAddress.getCityVillage() != null) {
					cityVillage = personAddress.getCityVillage().toString();
				}
				address.put("cityVillage", cityVillage);

				if (personAddress.getCountry() != null) {
					country = personAddress.getCountry().toString();
				}
				address.put("country", country);
				addresses.add(address);
			}
		}
		patientObject.put("addresses", addresses);
		
		sampleObject.put("patient", patientObject);

		if(this.getBatchSample() != null){
			Map<String,Object> batchObject = new HashMap<>();
			batchObject.put("uuid",this.getBatchSample().getUuid());
			batchObject.put("display",this.getBatchSample().getCode());
			sampleObject.put("batchSample",batchObject);
		}

		if(this.worksheetSample != null){
			Map<String,Object> worksheetSampleObject = new HashMap<>();
			worksheetSampleObject.put("uuid", this.getWorksheetSample().getUuid());
			worksheetSampleObject.put("display", this.getWorksheetSample().getCode());
			Map<String,Object> worksheetDefinitionObject = new HashMap<>();
			worksheetDefinitionObject.put("uuid", this.getWorksheetSample().getWorksheetDefinition().getUuid());
			worksheetDefinitionObject.put("code",this.getWorksheetSample().getWorksheetDefinition().getCode());
			worksheetSampleObject.put("worksheetDefinition", worksheetDefinitionObject);
			sampleObject.put("worksheetSample",worksheetSampleObject);
		}
		
		return sampleObject;
	}
	
	public Date getDateTime() {
		return this.dateTime;
	}
	
	public void setDateTime(Date timeStamp) {
		this.dateTime = timeStamp;
	}
	
	public Visit getVisit() {
		return this.visit;
	}
	
	public void setVisit(Visit visit) {
		this.visit = visit;
	}
	
	public String getLabel() {
		return this.label;
	}
	
	public void setLabel(String label) {
		this.label = label;
	}
	
	public Concept getConcept() {
		return this.concept;
	}
	
	public void setConcept(Concept concept) {
		this.concept = concept;
	}
	
	public Concept getSpecimenSource() {
		return this.specimenSource;
	}
	
	public void setSpecimenSource(Concept specimenSource) {
		this.specimenSource = specimenSource;
	}
	
	public Integer getId() {
		return id;
	}
	
	public void setId(Integer id) {
		this.id = id;
	}
	
	public List<SampleOrder> getSampleOrders() {
		return sampleOrders;
	}
	
	public void setSampleOrders(List<SampleOrder> sampleOrders) {
		this.sampleOrders = sampleOrders;
	}
	
	public List<SampleStatus> getSampleStatuses() {
		return sampleStatuses;
	}
	
	public void setLocation(Location location) {
		this.location = location;
	}
	
	public Location getLocation() {
		return location;
	}
	
	public void setSampleStatuses(List<SampleStatus> sampleStatuses) {
		this.sampleStatuses = sampleStatuses;
	}
	
	public void setBatchSample(BatchSample batchSample) {
		this.batchSample = batchSample;
	}
	
	public BatchSample getBatchSample() {
		return batchSample;
	}
	
	public WorksheetSample getWorksheetSample() {
		return worksheetSample;
	}
	
	public void setWorksheetSample(WorksheetSample worksheetSample) {
		this.worksheetSample = worksheetSample;
	}
}
